C51 COMPILER V9.01   MAIN                                                                  09/30/2018 14:42:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include"reg52.h"
   2          
   3          #ifndef __SOUNDPLAY_H_REVISION_FIRST__ 
   4          #define __SOUNDPLAY_H_REVISION_FIRST__  
   5          //************************************************************************** 
   6          #define SYSTEM_OSC 11059200//12000000 //定义晶振频率12000000HZ 
   7          #define SOUND_SPACE 4/5 //定义普通音符演奏的长度分率,//每4分音符间隔 
   8          sbit BeepIO = P3^5; //定义输出管脚 
   9          unsigned int code FreTab[12] = { 262,277,294,311,330,349,369,392,415,440,466,494 }; //原始频率表 
  10          unsigned char code SignTab[7] = { 0,2,4,5,7,9,11 }; //1~7在频率表中的位置 
  11          unsigned char code LengthTab[7]= { 1,2,4,8,16,32,64 }; 
  12          unsigned char Sound_Temp_TH0,Sound_Temp_TL0; //音符定时器初值暂存 
  13          unsigned char Sound_Temp_TH1,Sound_Temp_TL1; //音长定时器初值暂存 
  14          //************************************************************************** 
  15          void InitialSound(void) 
  16          { 
  17   1      BeepIO = 1; 
  18   1      Sound_Temp_TH1 = (65535-(1/1200)*SYSTEM_OSC)/256; // 计算TL1应装入的初值 (10ms的初装值) 
  19   1      Sound_Temp_TL1 = (65535-(1/1200)*SYSTEM_OSC)%256; // 计算TH1应装入的初值 
  20   1      TH1 = Sound_Temp_TH1; 
  21   1      TL1 = Sound_Temp_TL1; 
  22   1      TMOD |= 0x11; 
  23   1      ET0 = 1; 
  24   1      ET1 = 0; 
  25   1      TR0 = 0; 
  26   1      TR1 = 0; 
  27   1      EA = 1; 
  28   1      } 
  29          void BeepTimer0(void) interrupt 1 //音符发生中断 
  30          { 
  31   1      BeepIO = !BeepIO; 
  32   1      TH0 = Sound_Temp_TH0; 
  33   1      TL0 = Sound_Temp_TL0; 
  34   1      } 
  35          //************************************************************************** 
  36          void Play(unsigned char *Sound,unsigned char Signature,unsigned Octachord,unsigned int Speed) 
  37          { 
  38   1      unsigned int NewFreTab[12]; //新的频率表 
  39   1      unsigned char i,j; 
  40   1      unsigned int Point,LDiv,LDiv0,LDiv1,LDiv2,LDiv4,CurrentFre,Temp_T,SoundLength; 
  41   1      unsigned char Tone,Length,SL,SH,SM,SLen,XG,FD; 
  42   1      for(i=0;i<12;i++) // 根据调号及升降八度来生成新的频率表 
  43   1      { 
  44   2      j = i + Signature; 
  45   2      if(j > 11) 
  46   2      { 
  47   3      j = j-12; 
  48   3      NewFreTab = FreTab[j]*2; 
*** ERROR C213 IN LINE 48 OF MAIN.C: left side of asn-op not an lvalue
  49   3      } 
  50   2      else 
  51   2      NewFreTab = FreTab[j]; 
  52   2      if(Octachord == 1) 
  53   2      NewFreTab>>=2; 
  54   2      else if(Octachord == 3) 
C51 COMPILER V9.01   MAIN                                                                  09/30/2018 14:42:16 PAGE 2   

  55   2      NewFreTab<<=2; 
  56   2      } 
  57   1      SoundLength = 0; 
  58   1      while(Sound[SoundLength] != 0x00) //计算歌曲长度 
  59   1      { 
  60   2      SoundLength+=2; 
  61   2      } 
  62   1      Point = 0; 
  63   1      Tone = Sound[Point]; 
  64   1      Length = Sound[Point+1]; // 读出第一个音符和它时时值 
  65   1      LDiv0 = 12000/Speed; // 算出1分音符的长度(几个10ms) 
  66   1      LDiv4 = LDiv0/4; // 算出4分音符的长度 
  67   1      LDiv4 = LDiv4-LDiv4*SOUND_SPACE; // 普通音最长间隔标准 
  68   1      TR0 = 0; 
  69   1      TR1 = 1; 
  70   1      while(Point < SoundLength) 
  71   1      { 
  72   2      SL=Tone%10; //计算出音符 
  73   2      SM=Tone/10%10; //计算出高低音 
  74   2      SH=Tone/100; //计算出是否升半 
  75   2      CurrentFre = NewFreTab[SignTab[SL-1]+SH]; //查出对应音符的频率 
  76   2      if(SL!=0) 
  77   2      { 
  78   3      if (SM==1) CurrentFre >>= 2; //低音 
  79   3      if (SM==3) CurrentFre <<= 2; //高音 
  80   3      Temp_T = 65536-(50000/CurrentFre)*10/(12000000/SYSTEM_OSC);//计算计数器初值 
  81   3      Sound_Temp_TH0 = Temp_T/256; 
  82   3      Sound_Temp_TL0 = Temp_T%256; 
  83   3      TH0 = Sound_Temp_TH0; 
  84   3      TL0 = Sound_Temp_TL0 + 12; //加12是对中断延时的补偿 
  85   3      } 
  86   2      SLen=LengthTab[Length%10]; //算出是几分音符 
  87   2      XG=Length/10%10; //算出音符类型(0普通1连音2顿音) 
  88   2      FD=Length/100; 
  89   2      LDiv=LDiv0/SLen; //算出连音音符演奏的长度(多少个10ms) 
  90   2      if (FD==1) 
  91   2      LDiv=LDiv+LDiv/2; 
  92   2      if(XG!=1) 
  93   2      if(XG==0) //算出普通音符的演奏长度 
  94   2      if (SLen<=4) 
  95   2      LDiv1=LDiv-LDiv4; 
  96   2      else 
  97   2      LDiv1=LDiv*SOUND_SPACE; 
  98   2      else 
  99   2      LDiv1=LDiv/2; //算出顿音的演奏长度 
 100   2      else 
 101   2      LDiv1=LDiv; 
 102   2      if(SL==0) LDiv1=0; 
 103   2      LDiv2=LDiv-LDiv1; //算出不发音的长度 
 104   2      if (SL!=0) 
 105   2      { 
 106   3      TR0=1; 
 107   3      for(i=LDiv1;i>0;i--) //发规定长度的音 
 108   3      { 
 109   4      while(TF1==0); 
 110   4      TH1 = Sound_Temp_TH1; 
 111   4      TL1 = Sound_Temp_TL1; 
 112   4      TF1=0; 
 113   4      } 
 114   3      } 
 115   2      if(LDiv2!=0) 
 116   2      { 
C51 COMPILER V9.01   MAIN                                                                  09/30/2018 14:42:16 PAGE 3   

 117   3      TR0=0; BeepIO=1; 
 118   3      for(i=LDiv2;i>0;i--) //音符间的间隔 
 119   3      { 
 120   4      while(TF1==0); 
 121   4      TH1 = Sound_Temp_TH1; 
 122   4      TL1 = Sound_Temp_TL1; 
 123   4      TF1=0; 
 124   4      } 
 125   3      } 
 126   2      Point+=2; 
 127   2      Tone=Sound[Point]; 
 128   2      Length=Sound[Point+1]; 
 129   2      } 
 130   1      BeepIO = 1; 
 131   1      } 
*** WARNING C316 IN LINE 131 OF main.c: unterminated conditionals

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
